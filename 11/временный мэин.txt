#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include "read.h"
#include "solve.h"
#include "read.c"
#include "solve.c"
int main()
{
    const char *name="a.txt";
    int n,m,res,key;
    double* a;
    double t;
    printf("Input n,m and key:\n");
    if(scanf("%d%d%d",&n,&m,&key)!=3)
    {
        printf("Cannot read!\n");
        return 1;
    }
    if(!(a=(double*)malloc(n*m*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
  if (key==0)
       {
           int ret;
         ret=read_matrix(name,a,n,m);
            if(ret<0)
            {
                switch (ret)
                {
                    case -1:
                        printf("Cannot open%s\n",name);
                        break;
                    case -2:
                        printf("Cannot read%s\n",name);
                        break;
                    default:
                        printf("Unknown error%s\n",name);
                        break;
                }
                free(a);
                return 3;
            }

       }
       else init_matrix(a,n,m,key);
    print_matrix(a,n,m);
    t=clock();
    res=solve(a,n,m);
    t=(clock()-t)/CLOCKS_PER_SEC;
    if (res)
        printf("YES\n");
    else printf("NO\n");
    printf("Elapse time=%.2f\n",t);
    free(a);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include "read.h"
#include "solve.h"
#include "read.c"
#include "solve.c"
int main()
{
    const char *name="a.txt";
    int n,key;
    double* a;
    double t,res;
    printf("Input n and key:\n");
    if(scanf("%d%d",&n,&key)!=2)
    {
        printf("Cannot read!\n");
        return 1;
    }
    if(!(a=(double*)malloc(n*n*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
  if (key==0)
       {
           int ret;
         ret=read_matrix(name,a,n);
            if(ret<0)
            {
                switch (ret)
                {
                    case -1:
                        printf("Cannot open%s\n",name);
                        break;
                    case -2:
                        printf("Cannot read%s\n",name);
                        break;
                    default:
                        printf("Unknown error%s\n",name);
                        break;
                }
                free(a);
                return 3;
            }

       }
       else init_matrix(a,n);
    print_matrix(a,n);
    t=clock();
    res=solve(a,n);
    t=(clock()-t)/CLOCKS_PER_SEC;
    printf("Otvet: %.2f\n",res);
    printf("Elapse time=%.2f\n",t);
    free(a);
    return 0;
}








#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include "read.h"
#include "solve.h"
#include "read.c"
#include "solve.c"
int main()
{
    const char *name1="a.txt";
    const char *name2="b.txt";
    int n,m,key1,key2;
    double* a;
    double* b;
    double* c;
    double t;
    printf("Input m,n and key1 and key2:\n");
    if(scanf("%d%d%d%d",&m,&n,&key1,&key2)!=4)
    {
        printf("Cannot read!\n");
        return 1;
    }
    if(!(a=(double*)malloc(n*m*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
    if(!(b=(double*)malloc(n*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
    if(!(c=(double*)malloc(m*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
  if (key1==0)
       {
           int ret;
         ret=read_matrix(name1,a,n,m);
            if(ret<0)
            {
                switch (ret)
                {
                    case -1:
                        printf("Cannot open%s\n",name1);
                        break;
                    case -2:
                        printf("Cannot read%s\n",name1);
                        break;
                    default:
                        printf("Unknown error%s\n",name1);
                        break;
                }
                free(a);
                return 3;
            }

       }
       else init_matrix(a,n,m);
         if (key2==0)
       {
           int ret1;
         ret1=read_matrix(name2,b,n,1);
            if(ret1<0)
            {
                switch (ret1)
                {
                    case -1:
                        printf("Cannot open%s\n",name2);
                        break;
                    case -2:
                        printf("Cannot read%s\n",name2);
                        break;
                    default:
                        printf("Unknown error%s\n",name2);
                        break;
                }
                free(b);
                return 3;
            }

       }
       else init_matrix(b,n,1);
       printf("MATRIX A:\n");
    print_matrix(a,n,m);
    printf("VECTOR B:\n");
    print_vector(b,n);
    t=clock();
    solve(a,b,c,n,m);
    t=(clock()-t)/CLOCKS_PER_SEC;
    printf("VECTOR C:\n");
    print_vector(c,m);
    printf("Elapse time=%.2f\n",t);
    free(a);
    free(b);
    free(c);
    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include "read.h"
#include "solve.h"
#include "read.c"
#include "solve.c"
int main()
{
    const char *name1="a.txt";
    const char *name2="b.txt";
    int n,m,k,key1,key2;
    double* a;
    double* b;
    double* c;
    double t;
    printf("Input m,n,k and key1 and key2:\n");
    if(scanf("%d%d%d%d%d",&m,&n,&k,&key1,&key2)!=5)
    {
        printf("Cannot read!\n");
        return 1;
    }
    if(!(a=(double*)malloc(n*m*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
    if(!(b=(double*)malloc(n*k*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
    if(!(c=(double*)malloc(m*k*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
  if (key1==0)
       {
           int ret;
         ret=read_matrix(name1,a,n,m);
            if(ret<0)
            {
                switch (ret)
                {
                    case -1:
                        printf("Cannot open%s\n",name1);
                        break;
                    case -2:
                        printf("Cannot read%s\n",name1);
                        break;
                    default:
                        printf("Unknown error%s\n",name1);
                        break;
                }
                free(a);
                return 3;
            }

       }
       else init_matrix(a,n,m);
         if (key2==0)
       {
           int ret1;
         ret1=read_matrix(name2,b,n,k);
            if(ret1<0)
            {
                switch (ret1)
                {
                    case -1:
                        printf("Cannot open%s\n",name2);
                        break;
                    case -2:
                        printf("Cannot read%s\n",name2);
                        break;
                    default:
                        printf("Unknown error%s\n",name2);
                        break;
                }
                free(b);
                return 3;
            }

       }
       else init_matrix(b,n,k);
    printf("MATRIX A:\n");
    print_matrix(a,n,m);
    printf("MATRIX B:\n");
    print_matrix(b,k,n);
    t=clock();
    solve(a,b,c,n,m,k);
    t=(clock()-t)/CLOCKS_PER_SEC;
    printf("MATRIX C:\n");
    print_matrix(c,k,m);
    printf("Elapse time=%.2f\n",t);
    free(a);
    free(b);
    free(c);
    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include "read.h"
#include "solve.h"
int main(int argc, char** argv)
{
    int n,m,i,j;
    double* a;
    double* b;
    double* x;
    double t;
    const char *name1=0;
    const char *name2=0;
    if(argc!=4||n=atoi(argv[1])<=0)
    {
        printf("Usage %s n <file>\n",argv[0]);
        return 1;
    }
    if(argc==4)
        {
            name1=argv[2];
            name2=argv[3];
        }
    if(argc==3)
        name1=argv[2];
    if(!(a=(double*)malloc(n*n*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
    if(!(b=(double*)malloc(n*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
    if(!(x=(double*)malloc(n*sizeof(double))))
    {
        printf("Not enough memory");
        return 2;
    }
    if(name1)
    {
        int ret1;
        ret1=read_matrix(name1,a,n,m);
        if(ret1<0)
        {
            switch(ret1)
            {
                case -1: printf("Cannot open %s\n",name1); break;
                case -2: printf("Cannot read %s\n",name1);break;
                default: printf("Unknown error %d in %s\n",ret1,name1);
            }
            free(a);
            return 3;
        }

    } else init_matrix(a,n,m);
    if(name2)
    {
        int ret2;
        ret2=read_matrix(name2,b,n,k);
        if(ret2<0)
        {
            switch(ret2)
            {
                case -1: printf("Cannot open %s\n",name2); break;
                case -2: printf("Cannot read %s\n",name2);break;
                default: printf("Unknown error %d in %s\n",ret2,name2);
            }
            free(b);
            return 3;
        }

    } else init_matrix(b,n,k);
    printf("Matrix A:\n");
    print_matrix(a,n,m);
    printf("MATRIX B:\n");
    print_vector(b,k,n);
    t=clock();
    solve(a,b,c,n,m,k);
    t=(clock()-t)/CLOCKS_PER_SEC;
    printf("MATRIX C:\n");
    print_vector(c,k,m);
    printf("Elapse time=%.2f\n",t);
    free(a);
    free(b);
    free(x);
    return 0;
}